name: PR Checks
on:
  - pull_request
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  actions: none
  attestations: none
  checks: none
  contents: read
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: read
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2]

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: dream
          POSTGRES_DB: dream_core_test
          POSTGRES_PASSWORD: 'postgres'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      postgresAlternateConnection:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: dream
          POSTGRES_DB: dream_core_alternate_connection_test
          POSTGRES_PASSWORD: 'postgres'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_USER: dream
          MYSQL_DATABASE: dream_core_test_mysql
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306

    env:
      NODE_ENV: test
      PORT: 7778
      DB_USER: dream
      DB_USER_MYSQL: root
      DB_USER_ROOT_MYSQL: root
      DB_NAME: dream_core_test
      DB_NAME_2: dream_core_alternate_connection_test
      DB_NAME_MYSQL: dream_core_test_mysql
      DB_HOST: localhost
      DB_HOST_MYSQL: localhost
      REPLICA_DB_NAME: dream_core_test
      REPLICA_DB_HOST: localhost
      REPLICA_DB_PORT: 5432
      DB_PASSWORD: postgres
      DB_PASSWORD_MYSQL: password
      DB_PORT: 5432
      DB_PORT_2: 5433
      DB_PORT_MYSQL: 3306
      TZ: UTC
      YARN_CACHE_FOLDER: ~/.yarn-cache
      DREAM_PARALLEL_TESTS: 4
      APP_ENCRYPTION_KEY: ${{ secrets.APP_ENCRYPTION_KEY }}
      LEGACY_APP_ENCRYPTION_KEY: ${{ secrets.LEGACY_APP_ENCRYPTION_KEY }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - run: npm install -g corepack
      - run: corepack enable

      - run: "echo \"nodeLinker: node-modules\" > ./.yarnrc.yml"
      - run: "echo -e \"npmScopes:\" >> ./.yarnrc.yml"
      - run: "echo -e \"  rvohealth:\" >> ./.yarnrc.yml"
      - run: "echo -e \"    npmAuthToken: '${{ secrets.GITHUB_TOKEN }}'\" >> ./.yarnrc.yml"
      - run: "echo -e \"    npmRegistryServer: 'https://npm.pkg.github.com'\" >> ./.yarnrc.yml"

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: ~/.yarn-cache
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/yarn.lock') }}

      - if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: yarn list

      - run: yarn install --immutable
      - run: yarn dream db:migrate --skip-sync
      - run: yarn spec --shard=${{ matrix.shard }}/${{ strategy.job-total }}

  linting:
    name: Linting
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      YARN_CACHE_FOLDER: ~/.yarn-cache
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - run: npm install -g corepack
      - run: corepack enable

      - run: "echo \"nodeLinker: node-modules\" > ./.yarnrc.yml"
      - run: "echo -e \"npmScopes:\" >> ./.yarnrc.yml"
      - run: "echo -e \"  rvohealth:\" >> ./.yarnrc.yml"
      - run: "echo -e \"    npmAuthToken: '${{ secrets.GITHUB_TOKEN }}'\" >> ./.yarnrc.yml"
      - run: "echo -e \"    npmRegistryServer: 'https://npm.pkg.github.com'\" >> ./.yarnrc.yml"

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: ~/.yarn-cache
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/yarn.lock') }}

      - if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: yarn list

      - run: yarn install --immutable
      - run: yarn lint

  check-build:
    name: Check build
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      YARN_CACHE_FOLDER: ~/.yarn-cache
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - run: npm install -g corepack
      - run: corepack enable

      - run: "echo \"nodeLinker: node-modules\" > ./.yarnrc.yml"
      - run: "echo -e \"npmScopes:\" >> ./.yarnrc.yml"
      - run: "echo -e \"  rvohealth:\" >> ./.yarnrc.yml"
      - run: "echo -e \"    npmAuthToken: '${{ secrets.GITHUB_TOKEN }}'\" >> ./.yarnrc.yml"
      - run: "echo -e \"    npmRegistryServer: 'https://npm.pkg.github.com'\" >> ./.yarnrc.yml"

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: ~/.yarn-cache
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/yarn.lock') }}

      - if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: yarn list

      - run: yarn install --immutable
      - run: yarn build
      - run: yarn build:test-app
