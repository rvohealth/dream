
/*

                                    ,▄█▄                 
    ]█▄▄                         ╓█████▌                 
    ▐██████▄                   ▄█████▓╣█                 
     ║████████▄,  ,  ,,▄,▄▄▄▓██████╬╬╣╣▌                 
      ╚███╣██████████▓▓▓▓██████████╩╠╬▓                  
       ╙█╬╬╬▓███████████████████████▒▓▌                  
        ╙▓█▓██████████████████████████                   
         ╚██████▀███████████╩█▓▌▐▓████▄                  
         '║█████`╣█Γ║████████▄▄φ▓█████▌                 
          ║█████████████████████▓█████▌                  
           █████████████▓▓████████████                   
           ║█████████████████████████                    
          ]█████████████████████████                     
         ,▓██████████████████████████                    
        ▓█████████████████████████████µ                  
       ▐███████████████████████████████▄▄                
       ║█████████████████████████████████╬╬╣▓            
   ,╔╦║███████████████████████████████████▓╬╬╣           
,≥≥⌠░░░╠▓████████████████████████████████████▓▓          
,;=-',▄█████████████████████████████████████████▓        
                                                         
                                                         
                                                         
  ██████╗ ███████╗██╗   ██╗ ██████╗██╗  ██╗██╗ ██████╗   
  ██╔══██╗██╔════╝╚██╗ ██╔╝██╔════╝██║  ██║██║██╔════╝   
  ██████╔╝███████╗ ╚████╔╝ ██║     ███████║██║██║        
  ██╔═══╝ ╚════██║  ╚██╔╝  ██║     ██╔══██║██║██║        
  ██║     ███████║   ██║   ╚██████╗██║  ██║██║╚██████╗   
  ╚═╝     ╚══════╝   ╚═╝    ╚═════╝╚═╝  ╚═╝╚═╝ ╚═════╝   
                                                         
                                                         

This file was automatically generated by my cat, Aster.
He does not want you mucking about with his files,
and we are pretty lax on trimming his nails.

I mean, we have him pretty well fenced in but he is an
escape artist and he still manages to get fleas!

My point is, don't go mucking about with his files!

He actually has a hopefully well-tempered message for
us humans, he says:

"
  Dear pathetic humans,

  Here is a haiku to keep you in line

  don't dare go mucking
  with my files, I lyke them fine
  prettierignore
"

*/

import type CalendarDate from '../../src/helpers/CalendarDate.js'
import { type DateTime } from '../../src/helpers/DateTime.js'
import {
  BalloonColorsEnum,
  BalloonColorsEnumValues,
  BalloonLineMaterialsEnum,
  BalloonLineMaterialsEnumValues,
  BalloonTypesEnum,
  BalloonTypesEnumValues,
  CatTreats,
  CatTreatsValues,
  ExtraRateableTypesEnum,
  ExtraRateableTypesEnumValues,
  ExtraRatingTypesEnum,
  ExtraRatingTypesEnumValues,
  IdType,
  Json,
  LocalesEnum,
  LocalesEnumValues,
  LocalizableTypesEnum,
  LocalizableTypesEnumValues,
  PetTreatsEnum,
  PetTreatsEnumValues,
  ShapableTypesEnum,
  ShapableTypesEnumValues,
  ShapeTypesEnum,
  ShapeTypesEnumValues,
  Species,
  SpeciesTypesEnum,
  SpeciesTypesEnumValues,
  SpeciesValues
} from './db.js'

export const schema = {
  balloon_lines: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['balloonId', 'createdAt', 'id', 'material', 'updatedAt'],
    columns: {
      balloonId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      material: {
        coercedType: {} as BalloonLineMaterialsEnum | null,
        enumType: {} as BalloonLineMaterialsEnum,
        enumArrayType: [] as BalloonLineMaterialsEnum[],
        enumValues: BalloonLineMaterialsEnumValues,
        dbType: 'balloon_line_materials_enum',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloon: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  balloon_spotter_balloons: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['balloonId', 'balloonSpotterId', 'createdAt', 'id', 'updatedAt', 'userId'],
    columns: {
      balloonId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      balloonSpotterId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloon: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: false,
        requiredOnClauses: null,
      },
      balloonSpotter: {
        type: 'BelongsTo',
        foreignKey: 'balloonSpotterId',
        tables: ['balloon_spotters'],
        optional: false,
        requiredOnClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: true,
        requiredOnClauses: null,
      },
    },
  },
  balloon_spotters: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'name', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloonSpotterBalloons: {
        type: 'HasMany',
        foreignKey: 'balloonSpotterId',
        tables: ['balloon_spotter_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      balloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      users: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['users'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  beautiful_balloons: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['allBalloonStiChildren', 'default', 'delegated'],
    scopes: {
      default: ['dream:STI', 'dream:SoftDelete'],
      named: ['red'],
    },
    nonJsonColumnNames: ['color', 'createdAt', 'deletedAt', 'id', 'multicolor', 'mylarOnlyProperty', 'positionAlpha', 'positionBeta', 'shapableId', 'shapableType', 'type', 'updatedAt', 'userId', 'volume'],
    columns: {
      color: {
        coercedType: {} as BalloonColorsEnum | null,
        enumType: {} as BalloonColorsEnum,
        enumArrayType: [] as BalloonColorsEnum[],
        enumValues: BalloonColorsEnumValues,
        dbType: 'balloon_colors_enum',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      multicolor: {
        coercedType: {} as BalloonColorsEnum[] | null,
        enumType: {} as BalloonColorsEnum,
        enumArrayType: [] as BalloonColorsEnum[],
        enumValues: BalloonColorsEnumValues,
        dbType: 'balloon_colors_enum[]',
        allowNull: true,
        isArray: true,
      },
      mylarOnlyProperty: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      positionAlpha: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      positionBeta: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      shapableId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      shapableType: {
        coercedType: {} as ShapableTypesEnum | null,
        enumType: {} as ShapableTypesEnum,
        enumArrayType: [] as ShapableTypesEnum[],
        enumValues: ShapableTypesEnumValues,
        dbType: 'shapable_types_enum',
        allowNull: true,
        isArray: false,
      },
      type: {
        coercedType: {} as BalloonTypesEnum,
        enumType: {} as BalloonTypesEnum,
        enumArrayType: [] as BalloonTypesEnum[],
        enumValues: BalloonTypesEnumValues,
        dbType: 'balloon_types_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      volume: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'numeric',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloonLine: {
        type: 'HasOne',
        foreignKey: 'balloonId',
        tables: ['balloon_lines'],
        optional: null,
        requiredOnClauses: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'extraRateableId',
        tables: ['extra_ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      sandbags: {
        type: 'HasMany',
        foreignKey: 'balloonId',
        tables: ['sandbags'],
        optional: null,
        requiredOnClauses: null,
      },
      shapable: {
        type: 'BelongsTo',
        foreignKey: 'shapableId',
        tables: ['shapes'],
        optional: true,
        requiredOnClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: true,
        requiredOnClauses: null,
      },
    },
  },
  collars: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['deep', 'default', 'summary'],
    scopes: {
      default: ['dream:SoftDelete', 'hideHiddenCollars'],
      named: [],
    },
    nonJsonColumnNames: ['balloonId', 'createdAt', 'deletedAt', 'hidden', 'id', 'lost', 'petId', 'position', 'tagName', 'updatedAt'],
    columns: {
      balloonId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      hidden: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      lost: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      petId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      tagName: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloon: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: true,
        requiredOnClauses: null,
      },
      pet: {
        type: 'BelongsTo',
        foreignKey: 'petId',
        tables: ['pets'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  composition_asset_audits: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['approval', 'compositionAssetId', 'createdAt', 'id', 'notes', 'updatedAt'],
    columns: {
      approval: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      compositionAssetId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      notes: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      composition: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      compositionAsset: {
        type: 'BelongsTo',
        foreignKey: 'compositionAssetId',
        tables: ['composition_assets'],
        optional: false,
        requiredOnClauses: null,
      },
      user: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['users'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  composition_assets: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['compositionId', 'createdAt', 'id', 'name', 'primary', 'score', 'src', 'updatedAt'],
    columns: {
      compositionId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      primary: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      score: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      src: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      composition: {
        type: 'BelongsTo',
        foreignKey: 'compositionId',
        tables: ['compositions'],
        optional: false,
        requiredOnClauses: null,
      },
      compositionAssetAudits: {
        type: 'HasMany',
        foreignKey: 'compositionAssetId',
        tables: ['composition_asset_audits'],
        optional: null,
        requiredOnClauses: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: null,
      },
      passthroughCurrentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: null,
      },
      requiredCurrentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: ['locale'],
      },
      user: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['users'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  compositions: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['content', 'createdAt', 'id', 'primary', 'updatedAt', 'userId'],
    columns: {
      content: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      metadata: {
        coercedType: {} as Json,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'jsonb',
        allowNull: false,
        isArray: false,
      },
      metadata2: {
        coercedType: {} as Json | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'jsonb',
        allowNull: true,
        isArray: false,
      },
      metadata3: {
        coercedType: {} as Json | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'json',
        allowNull: true,
        isArray: false,
      },
      primary: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      cascadeDeletableLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: null,
      },
      compositionAssetAudits: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_asset_audits'],
        optional: null,
        requiredOnClauses: null,
      },
      compositionAssets: {
        type: 'HasMany',
        foreignKey: 'compositionId',
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'extraRateableId',
        tables: ['extra_ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: null,
      },
      mainCompositionAsset: {
        type: 'HasOne',
        foreignKey: 'compositionId',
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      mainCompositionAssetAudits: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_asset_audits'],
        optional: null,
        requiredOnClauses: null,
      },
      passthroughCurrentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: null,
      },
      requiredCurrentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredOnClauses: ['locale'],
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  edge_case_attributes: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'kPop', 'popK', 'popKPop', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      kPop: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      popK: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      popKPop: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  extra_ratings: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: ['dream:STI'],
      named: [],
    },
    nonJsonColumnNames: ['body', 'createdAt', 'extraRateableId', 'extraRateableType', 'id', 'rating', 'type', 'updatedAt', 'userId'],
    columns: {
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      extraRateableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      extraRateableType: {
        coercedType: {} as ExtraRateableTypesEnum,
        enumType: {} as ExtraRateableTypesEnum,
        enumArrayType: [] as ExtraRateableTypesEnum[],
        enumValues: ExtraRateableTypesEnumValues,
        dbType: 'extra_rateable_types_enum',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      rating: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      type: {
        coercedType: {} as ExtraRatingTypesEnum,
        enumType: {} as ExtraRatingTypesEnum,
        enumArrayType: [] as ExtraRatingTypesEnum[],
        enumValues: ExtraRatingTypesEnumValues,
        dbType: 'extra_rating_types_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      extraRateable: {
        type: 'BelongsTo',
        foreignKey: 'extraRateableId',
        tables: ['beautiful_balloons', 'compositions', 'posts'],
        optional: false,
        requiredOnClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  graph_edge_nodes: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'deletedAt', 'edgeId', 'id', 'multiScopedPosition', 'nodeId', 'position', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      edgeId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      multiScopedPosition: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      nodeId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      edge: {
        type: 'BelongsTo',
        foreignKey: 'edgeId',
        tables: ['graph_edges'],
        optional: false,
        requiredOnClauses: null,
      },
      headSibling: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      justThisSibling: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      node: {
        type: 'BelongsTo',
        foreignKey: 'nodeId',
        tables: ['graph_nodes'],
        optional: false,
        requiredOnClauses: null,
      },
      orderedSiblings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      orderedSiblingsWithOrderOnSource: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      siblings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      siblingsIncludingMe: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      tailSiblings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  graph_edges: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'name', 'updatedAt', 'weight'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      weight: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'numeric',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      edgeNodes: {
        type: 'HasMany',
        foreignKey: 'edgeId',
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      nodes: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  graph_nodes: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'name', 'omittedEdgePosition', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      omittedEdgePosition: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      edgeNodes: {
        type: 'HasMany',
        foreignKey: 'nodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      edges: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
        requiredOnClauses: null,
      },
      edgesOrderedByName: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
        requiredOnClauses: null,
      },
      edgesOrderedByPosition: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
        requiredOnClauses: null,
      },
      edgesWithAliasedPreloads: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
        requiredOnClauses: null,
      },
      nonNodeNameEdgesOnThroughAssociation: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
        requiredOnClauses: null,
      },
      nonOmittedPositionEdgeNodes: {
        type: 'HasMany',
        foreignKey: 'nodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
      nonOmittedPositionEdges: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
        requiredOnClauses: null,
      },
      orderedEdgeNodes: {
        type: 'HasMany',
        foreignKey: 'nodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  incompatible_foreign_key_type_examples: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'updatedAt', 'userId'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  invalid_association_sortable_models: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'position', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      users: {
        type: 'HasMany',
        foreignKey: 'id',
        tables: ['users'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  invalid_scope_sortable_models: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'position', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  localized_texts: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['body', 'createdAt', 'id', 'locale', 'localizableId', 'localizableType', 'name', 'title', 'updatedAt'],
    columns: {
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      locale: {
        coercedType: {} as LocalesEnum,
        enumType: {} as LocalesEnum,
        enumArrayType: [] as LocalesEnum[],
        enumValues: LocalesEnumValues,
        dbType: 'locales_enum',
        allowNull: false,
        isArray: false,
      },
      localizableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      localizableType: {
        coercedType: {} as LocalizableTypesEnum,
        enumType: {} as LocalizableTypesEnum,
        enumArrayType: [] as LocalizableTypesEnum[],
        enumValues: LocalizableTypesEnumValues,
        dbType: 'localizable_types_enum',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      title: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      localizable: {
        type: 'BelongsTo',
        foreignKey: 'localizableId',
        tables: ['composition_assets', 'compositions'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  model_for_openapi_type_specs: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['aDatetime', 'bio', 'birthdate', 'collarCount', 'collarCountInt', 'collarCountNumeric', 'createdAt', 'createdOn', 'email', 'favoriteBigint', 'favoriteBigints', 'favoriteBooleans', 'favoriteCitext', 'favoriteCitexts', 'favoriteDates', 'favoriteDatetimes', 'favoriteIntegers', 'favoriteNumerics', 'favoriteTexts', 'favoriteTreats', 'favoriteUuids', 'id', 'likesTreats', 'likesWalks', 'name', 'nicknames', 'notes', 'optionalUuid', 'passwordDigest', 'requiredCollarCount', 'requiredCollarCountInt', 'requiredFavoriteBigint', 'requiredFavoriteBigints', 'requiredFavoriteBooleans', 'requiredFavoriteCitext', 'requiredFavoriteCitexts', 'requiredFavoriteDates', 'requiredFavoriteDatetimes', 'requiredFavoriteIntegers', 'requiredFavoriteNumerics', 'requiredFavoriteTexts', 'requiredFavoriteUuids', 'requiredNicknames', 'species', 'updatedAt', 'uuid', 'volume'],
    columns: {
      aDatetime: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      bio: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: false,
        isArray: false,
      },
      birthdate: {
        coercedType: {} as CalendarDate | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'date',
        allowNull: true,
        isArray: false,
      },
      collarCount: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      collarCountInt: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      collarCountNumeric: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'numeric',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      createdOn: {
        coercedType: {} as CalendarDate,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'date',
        allowNull: false,
        isArray: false,
      },
      email: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      favoriteBigint: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      favoriteBigints: {
        coercedType: {} as IdType[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint[]',
        allowNull: true,
        isArray: true,
      },
      favoriteBooleans: {
        coercedType: {} as boolean[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean[]',
        allowNull: true,
        isArray: true,
      },
      favoriteCitext: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: true,
        isArray: false,
      },
      favoriteCitexts: {
        coercedType: {} as string[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext[]',
        allowNull: true,
        isArray: true,
      },
      favoriteDates: {
        coercedType: {} as CalendarDate[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'date[]',
        allowNull: true,
        isArray: true,
      },
      favoriteDatetimes: {
        coercedType: {} as DateTime[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone[]',
        allowNull: true,
        isArray: true,
      },
      favoriteIntegers: {
        coercedType: {} as number[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer[]',
        allowNull: true,
        isArray: true,
      },
      favoriteJsonbs: {
        coercedType: {} as Json[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'jsonb[]',
        allowNull: true,
        isArray: true,
      },
      favoriteJsons: {
        coercedType: {} as Json[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'json[]',
        allowNull: true,
        isArray: true,
      },
      favoriteNumerics: {
        coercedType: {} as number[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'numeric[]',
        allowNull: true,
        isArray: true,
      },
      favoriteTexts: {
        coercedType: {} as string[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text[]',
        allowNull: true,
        isArray: true,
      },
      favoriteTreats: {
        coercedType: {} as PetTreatsEnum[] | null,
        enumType: {} as PetTreatsEnum,
        enumArrayType: [] as PetTreatsEnum[],
        enumValues: PetTreatsEnumValues,
        dbType: 'pet_treats_enum[]',
        allowNull: true,
        isArray: true,
      },
      favoriteUuids: {
        coercedType: {} as string[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'uuid[]',
        allowNull: true,
        isArray: true,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      jsonData: {
        coercedType: {} as Json | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'json',
        allowNull: true,
        isArray: false,
      },
      jsonbData: {
        coercedType: {} as Json | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'jsonb',
        allowNull: true,
        isArray: false,
      },
      likesTreats: {
        coercedType: {} as boolean,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: false,
        isArray: false,
      },
      likesWalks: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      nicknames: {
        coercedType: {} as string[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying[]',
        allowNull: true,
        isArray: true,
      },
      notes: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      optionalUuid: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'uuid',
        allowNull: true,
        isArray: false,
      },
      passwordDigest: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      requiredCollarCount: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      requiredCollarCountInt: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      requiredFavoriteBigint: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      requiredFavoriteBigints: {
        coercedType: {} as IdType[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteBooleans: {
        coercedType: {} as boolean[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteCitext: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: false,
        isArray: false,
      },
      requiredFavoriteCitexts: {
        coercedType: {} as string[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteDates: {
        coercedType: {} as CalendarDate[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'date[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteDatetimes: {
        coercedType: {} as DateTime[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteIntegers: {
        coercedType: {} as number[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteJsonbs: {
        coercedType: {} as Json[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'jsonb[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteJsons: {
        coercedType: {} as Json[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'json[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteNumerics: {
        coercedType: {} as number[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'numeric[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteTexts: {
        coercedType: {} as string[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text[]',
        allowNull: false,
        isArray: true,
      },
      requiredFavoriteUuids: {
        coercedType: {} as string[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'uuid[]',
        allowNull: false,
        isArray: true,
      },
      requiredJsonData: {
        coercedType: {} as Json,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'json',
        allowNull: false,
        isArray: false,
      },
      requiredJsonbData: {
        coercedType: {} as Json,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'jsonb',
        allowNull: false,
        isArray: false,
      },
      requiredNicknames: {
        coercedType: {} as string[],
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying[]',
        allowNull: false,
        isArray: true,
      },
      species: {
        coercedType: {} as SpeciesTypesEnum | null,
        enumType: {} as SpeciesTypesEnum,
        enumArrayType: [] as SpeciesTypesEnum[],
        enumValues: SpeciesTypesEnumValues,
        dbType: 'species_types_enum',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      uuid: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'uuid',
        allowNull: false,
        isArray: false,
      },
      volume: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'numeric',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_with_date_time_conditional_hooks: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['counter', 'createdAt', 'id', 'somethingHappenedAt', 'somethingHappenedInATransactionAt', 'updatedAt'],
    columns: {
      counter: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      somethingHappenedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      somethingHappenedInATransactionAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_with_param_safe_and_unsafe_columns: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['allowedColumn1', 'allowedColumn2', 'column1', 'column2', 'createdAt', 'disallowedColumn1', 'disallowedColumn2', 'id', 'updatedAt'],
    columns: {
      allowedColumn1: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      allowedColumn2: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      column1: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      column2: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      disallowedColumn1: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      disallowedColumn2: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_with_param_unsafe_columns: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['allowedColumn1', 'allowedColumn2', 'createdAt', 'disallowedColumn1', 'disallowedColumn2', 'id', 'updatedAt'],
    columns: {
      allowedColumn1: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      allowedColumn2: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      disallowedColumn1: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      disallowedColumn2: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_with_serial_primary_keys: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_without_custom_deleted_ats: {
    primaryKey: 'id',
    createdAtField: 'updatedAt',
    updatedAtField: 'createdAt',
    deletedAtField: 'id',
    serializerKeys: [],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'deletedAt', 'id', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_without_deleted_ats: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: ['dream:SoftDelete', 'howyadoin'],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  model_without_updated_at: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['cantUpdateThis', 'createdAt', 'id', 'name'],
    columns: {
      cantUpdateThis: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  pet_understudy_join_models: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'petId', 'understudyId', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      petId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      understudyId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      pet: {
        type: 'BelongsTo',
        foreignKey: 'petId',
        tables: ['pets'],
        optional: false,
        requiredOnClauses: null,
      },
      understudy: {
        type: 'BelongsTo',
        foreignKey: 'understudyId',
        tables: ['pets'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  pets: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['deep', 'default', 'summary'],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'deletedAt', 'favoriteDaysOfWeek', 'favoriteTreats', 'id', 'name', 'nickname', 'positionWithinSpecies', 'species', 'userId', 'userUuid'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      favoriteDaysOfWeek: {
        coercedType: {} as number[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer[]',
        allowNull: true,
        isArray: true,
      },
      favoriteTreats: {
        coercedType: {} as CatTreats[] | null,
        enumType: {} as CatTreats,
        enumArrayType: [] as CatTreats[],
        enumValues: CatTreatsValues,
        dbType: 'cat_treats[]',
        allowNull: true,
        isArray: true,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      nickname: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      positionWithinSpecies: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      species: {
        coercedType: {} as Species | null,
        enumType: {} as Species,
        enumArrayType: [] as Species[],
        enumValues: SpeciesValues,
        dbType: 'species',
        allowNull: true,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      userUuid: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'uuid',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      andAny_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsEqual_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsEqual_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsIn_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsIn_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsIn_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsIn_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsNotEqual_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsNotEqual_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsNotIn_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsNotIn_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsNotIn_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_opsNotIn_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andAny_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_multipleClauses: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsEqual_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsEqual_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsIn_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsIn_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsIn_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsIn_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsNotEqual_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsNotEqual_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsNotIn_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsNotIn_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsNotIn_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_opsNotIn_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      andNot_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsEqual_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsEqual_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsIn_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsIn_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsIn_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsIn_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsNotEqual_null: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsNotEqual_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsNotIn_arrayWithNull: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsNotIn_arrayWithNullAndRed: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsNotIn_emptyArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_opsNotIn_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_red: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      and_redArray: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      collars: {
        type: 'HasMany',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
        requiredOnClauses: null,
      },
      currentCollar: {
        type: 'HasOne',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
        requiredOnClauses: null,
      },
      distinctBalloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      featuredPost: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['posts'],
        optional: null,
        requiredOnClauses: null,
      },
      featuredRatings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      notLostCollar: {
        type: 'HasOne',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
        requiredOnClauses: null,
      },
      petUnderstudies: {
        type: 'HasMany',
        foreignKey: 'petId',
        tables: ['pet_understudy_join_models'],
        optional: null,
        requiredOnClauses: null,
      },
      ratings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      understudies: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['pets'],
        optional: null,
        requiredOnClauses: null,
      },
      uniqueBalloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      uniqueCollars: {
        type: 'HasMany',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
        requiredOnClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: true,
        requiredOnClauses: null,
      },
      userThroughUuid: {
        type: 'BelongsTo',
        foreignKey: 'userUuid',
        tables: ['users'],
        optional: true,
        requiredOnClauses: null,
      },
    },
  },
  post_comments: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    nonJsonColumnNames: ['body', 'createdAt', 'deletedAt', 'id', 'postId', 'updatedAt'],
    columns: {
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      postId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      post: {
        type: 'BelongsTo',
        foreignKey: 'postId',
        tables: ['posts'],
        optional: false,
        requiredOnClauses: null,
      },
      postEvenIfDeleted: {
        type: 'BelongsTo',
        foreignKey: 'postId',
        tables: ['posts'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  post_visibilities: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'notes', 'updatedAt', 'visibility'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      notes: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      visibility: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      post: {
        type: 'HasOne',
        foreignKey: 'postVisibilityId',
        tables: ['posts'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
  posts: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    nonJsonColumnNames: ['body', 'createdAt', 'deletedAt', 'id', 'position', 'postVisibilityId', 'updatedAt', 'userId'],
    columns: {
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      postVisibilityId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      allComments: {
        type: 'HasMany',
        foreignKey: 'postId',
        tables: ['post_comments'],
        optional: null,
        requiredOnClauses: null,
      },
      comments: {
        type: 'HasMany',
        foreignKey: 'postId',
        tables: ['post_comments'],
        optional: null,
        requiredOnClauses: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'extraRateableId',
        tables: ['extra_ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      invalidWhereNotPostComments: {
        type: 'HasMany',
        foreignKey: 'postId',
        tables: ['post_comments'],
        optional: null,
        requiredOnClauses: null,
      },
      invalidWherePostComments: {
        type: 'HasMany',
        foreignKey: 'postId',
        tables: ['post_comments'],
        optional: null,
        requiredOnClauses: null,
      },
      overriddenNonNullRatings: {
        type: 'HasMany',
        foreignKey: 'rateableId',
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      postVisibility: {
        type: 'BelongsTo',
        foreignKey: 'postVisibilityId',
        tables: ['post_visibilities'],
        optional: true,
        requiredOnClauses: null,
      },
      ratings: {
        type: 'HasMany',
        foreignKey: 'rateableId',
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  ratings: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['deep', 'default'],
    scopes: {
      default: ['nonNullBodies'],
      named: [],
    },
    nonJsonColumnNames: ['body', 'createdAt', 'id', 'rateableId', 'rateableType', 'rating', 'updatedAt', 'userId'],
    columns: {
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      rateableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      rateableType: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      rating: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      rateable: {
        type: 'BelongsTo',
        foreignKey: 'rateableId',
        tables: ['compositions', 'posts'],
        optional: false,
        requiredOnClauses: null,
      },
      rateableEvenIfDeleted: {
        type: 'BelongsTo',
        foreignKey: 'rateableId',
        tables: ['compositions', 'posts'],
        optional: false,
        requiredOnClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  sandbags: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['balloonId', 'createdAt', 'id', 'updatedAt', 'weight', 'weightKgs', 'weightTons'],
    columns: {
      balloonId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      weight: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      weightKgs: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      weightTons: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      mylar: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  shapes: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: ['dream:STI'],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'name', 'type', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      type: {
        coercedType: {} as ShapeTypesEnum,
        enumType: {} as ShapeTypesEnum,
        enumArrayType: [] as ShapeTypesEnum[],
        enumValues: ShapeTypesEnumValues,
        dbType: 'shape_types_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  unscoped_sortable_models: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'position', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  user_settings: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'likesChalupas', 'updatedAt', 'userId'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      likesChalupas: {
        coercedType: {} as boolean,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredOnClauses: null,
      },
    },
  },
  users: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['deep', 'default', 'summary'],
    scopes: {
      default: ['hideDeleted'],
      named: ['withFunnyName'],
    },
    nonJsonColumnNames: ['birthdate', 'createdAt', 'deletedAt', 'email', 'encryptedSecret', 'favoriteDates', 'favoriteDatetimes', 'favoriteNumbers', 'favoriteWord', 'featuredPostPosition', 'grams', 'id', 'myOtherEncryptedSecret', 'name', 'passwordDigest', 'socialSecurityNumber', 'targetRating', 'updatedAt', 'uuid'],
    columns: {
      birthdate: {
        coercedType: {} as CalendarDate | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'date',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      email: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      encryptedSecret: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      favoriteDates: {
        coercedType: {} as CalendarDate[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'date[]',
        allowNull: true,
        isArray: true,
      },
      favoriteDatetimes: {
        coercedType: {} as DateTime[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone[]',
        allowNull: true,
        isArray: true,
      },
      favoriteNumbers: {
        coercedType: {} as number[] | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer[]',
        allowNull: true,
        isArray: true,
      },
      favoriteWord: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: true,
        isArray: false,
      },
      featuredPostPosition: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      grams: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      myOtherEncryptedSecret: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      passwordDigest: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      socialSecurityNumber: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      targetRating: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      uuid: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'uuid',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: ['kilograms', 'lbs', 'otherSecret', 'password', 'randoVirtual', 'secret'],
    associations: {
      allPets: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['pets'],
        optional: null,
        requiredOnClauses: null,
      },
      allPostComments: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['post_comments'],
        optional: null,
        requiredOnClauses: null,
      },
      allPosts: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['posts'],
        optional: null,
        requiredOnClauses: null,
      },
      asterPet: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['pets'],
        optional: null,
        requiredOnClauses: null,
      },
      balloonLines: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['balloon_lines'],
        optional: null,
        requiredOnClauses: null,
      },
      balloons: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      balloonsFromUuid: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
        requiredOnClauses: null,
      },
      collarsFromUuid: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['collars'],
        optional: null,
        requiredOnClauses: null,
      },
      compositionAssetAudits: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_asset_audits'],
        optional: null,
        requiredOnClauses: null,
      },
      compositionAssets: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      compositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      featuredPost: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['posts'],
        optional: null,
        requiredOnClauses: null,
      },
      featuredRatings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      firstCollarFromUuid: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['collars'],
        optional: null,
        requiredOnClauses: null,
      },
      firstPetFromUuid: {
        type: 'HasOne',
        foreignKey: 'userUuid',
        tables: ['pets'],
        optional: null,
        requiredOnClauses: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['extra_ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      incompatibleForeignKeyTypeExamples: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['incompatible_foreign_key_type_examples'],
        optional: null,
        requiredOnClauses: null,
      },
      mainComposition: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      mainCompositionAsset: {
        type: 'HasOne',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      nonExtantCompositionAssets1: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      nonExtantCompositionAssets2: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      notRecentCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      orderedPosts: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['posts'],
        optional: null,
        requiredOnClauses: null,
      },
      pets: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['pets'],
        optional: null,
        requiredOnClauses: null,
      },
      petsFromUuid: {
        type: 'HasMany',
        foreignKey: 'userUuid',
        tables: ['pets'],
        optional: null,
        requiredOnClauses: null,
      },
      postComments: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['post_comments'],
        optional: null,
        requiredOnClauses: null,
      },
      postRatings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      posts: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['posts'],
        optional: null,
        requiredOnClauses: null,
      },
      ratings: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      ratingsThroughPostsThatMatchUserTargetRating: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
        requiredOnClauses: null,
      },
      recentCompositionAssets: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      recentCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      recentMainCompositionAssets: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
        requiredOnClauses: null,
      },
      reverseOrderedCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      sortedCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      sortedCompositions2: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
        requiredOnClauses: null,
      },
      userSettings: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['user_settings'],
        optional: null,
        requiredOnClauses: null,
      },
    },
  },
} as const

export const globalSchema = {
  passthroughColumns: ['locale'],
  allDefaultScopeNames: [
    'dream:STI',
    'dream:SoftDelete',
    'hideDeleted',
    'hideHiddenCollars',
    'howyadoin',
    'nonNullBodies'
  ],
  globalNames: {
    models: {
      'Balloon/Latex/Animal': 'beautiful_balloons',
      'Balloon/Latex': 'beautiful_balloons',
      'Balloon/Mylar': 'beautiful_balloons',
      'Balloon': 'beautiful_balloons',
      'BalloonLine': 'balloon_lines',
      'BalloonSpotter': 'balloon_spotters',
      'BalloonSpotterBalloon': 'balloon_spotter_balloons',
      'Collar': 'collars',
      'Composition': 'compositions',
      'CompositionAsset': 'composition_assets',
      'CompositionAssetAudit': 'composition_asset_audits',
      'EdgeCaseAttribute': 'edge_case_attributes',
      'ExtraRating/Base': 'extra_ratings',
      'ExtraRating/HeartRating': 'extra_ratings',
      'ExtraRating/StarRating': 'extra_ratings',
      'Graph/Edge': 'graph_edges',
      'Graph/EdgeNode': 'graph_edge_nodes',
      'Graph/Node': 'graph_nodes',
      'IncompatibleForeignKeyTypeExample': 'incompatible_foreign_key_type_examples',
      'InvalidAssociationSortableModel': 'invalid_association_sortable_models',
      'InvalidScopeSortableModel': 'invalid_scope_sortable_models',
      'LocalizedText': 'localized_texts',
      'ModelForOpenapiTypeSpec': 'model_for_openapi_type_specs',
      'ModelWithDateTimeConditionalHooks': 'model_with_date_time_conditional_hooks',
      'ModelWithParamSafeAndUnsafeColumns': 'model_with_param_safe_and_unsafe_columns',
      'ModelWithParamUnsafeColumns': 'model_with_param_unsafe_columns',
      'ModelWithSerialPrimaryKey': 'model_with_serial_primary_keys',
      'ModelWithoutCustomDeletedAt': 'model_without_custom_deleted_ats',
      'ModelWithoutDeletedAt': 'model_without_deleted_ats',
      'ModelWithoutUpdatedAt': 'model_without_updated_at',
      'NonNullRating': 'ratings',
      'Pet': 'pets',
      'PetUnderstudyJoinModel': 'pet_understudy_join_models',
      'Post': 'posts',
      'PostComment': 'post_comments',
      'PostVisibility': 'post_visibilities',
      'Rating': 'ratings',
      'Sandbag': 'sandbags',
      'Shape/Cat': 'shapes',
      'Shape/Regular': 'shapes',
      'Shape': 'shapes',
      'UnscopedSortableModel': 'unscoped_sortable_models',
      'User': 'users',
      'UserSettings': 'user_settings'
    },
    serializers: [
      'BallonLineSummarySerializer',
      'Balloon/DelegatedAttributeSerializer',
      'Balloon/Latex/AnimalSerializer',
      'Balloon/LatexSerializer',
      'Balloon/MylarSerializer',
      'BalloonLineSerializer',
      'BalloonSerializer',
      'BalloonSpotterBalloonSerializer',
      'BalloonSpotterSerializer',
      'BalloonSummarySerializer',
      'CollarDeepSerializer',
      'CollarSerializer',
      'CollarSummarySerializer',
      'CompositionAlternateSerializer',
      'CompositionSerializer',
      'EdgeCaseAttributeSerializer',
      'ExtraRating/BaseExtraRatingSerializer',
      'ExtraRating/HeartRatingSerializer',
      'ExtraRating/StarRatingSerializer',
      'Graph/EdgeNodeSerializer',
      'Graph/EdgeSerializer',
      'Graph/NodeSerializer',
      'LocalizedText/BaseSerializer',
      'PetDeepDelegatedAttributeSerializer',
      'PetDeepSerializer',
      'PetSerializer',
      'PetSummarySerializer',
      'PetUnderstudyJoinModelSerializer',
      'PostSerializer',
      'PostVisibilitySerializer',
      'RatingDeepSerializer',
      'RatingSerializer',
      'SandbagSerializer',
      'ShapeSerializer',
      'ShapeSummarySerializer',
      'UserDeepSerializer',
      'UserSerializer',
      'UserSummarySerializer',
      'view-model/PetSerializer',
      'view-model/PetSummarySerializer',
      'view-model/UserSerializer',
      'view-model/UserSummarySerializer'
    ],
  },
} as const
