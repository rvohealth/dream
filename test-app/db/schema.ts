import { DateTime } from 'luxon'
import {
  BalloonColorsEnumValues,
  BalloonLineMaterialsEnumValues,
  BalloonTypesEnumValues,
  CatTreatsValues,
  ExtraRateableTypesEnumValues,
  ExtraRatingTypesEnumValues,
  LocalesEnumValues,
  LocalizableTypesEnumValues,
  SpeciesValues,
  BalloonColorsEnum,
  BalloonLineMaterialsEnum,
  BalloonTypesEnum,
  CatTreats,
  ExtraRateableTypesEnum,
  ExtraRatingTypesEnum,
  Json,
  LocalesEnum,
  LocalizableTypesEnum,
  Species,
  IdType,
  Timestamp
} from './sync'

export const schema = {
  balloon_lines: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      balloonId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      material: {
        coercedType: {} as BalloonLineMaterialsEnum | null,
        enumType: {} as BalloonLineMaterialsEnum,
        enumValues: BalloonLineMaterialsEnumValues,
        dbType: 'balloon_line_materials_enum',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloon: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: false,
      },
    },
  },
  balloon_spotter_balloons: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      balloonSpotterId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      balloonId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: true,
      },
      balloonSpotter: {
        type: 'BelongsTo',
        foreignKey: 'balloonSpotterId',
        tables: ['balloon_spotters'],
        optional: false,
      },
      balloon: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: false,
      },
    },
  },
  balloon_spotters: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      balloonSpotterBalloons: {
        type: 'HasMany',
        foreignKey: 'balloonSpotterId',
        tables: ['balloon_spotter_balloons'],
        optional: null,
      },
      balloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
      },
      users: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['users'],
        optional: null,
      },
    },
  },
  beautiful_balloons: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      type: {
        coercedType: {} as BalloonTypesEnum,
        enumType: {} as BalloonTypesEnum,
        enumValues: BalloonTypesEnumValues,
        dbType: 'balloon_types_enum',
        allowNull: false,
        isArray: false,
      },
      volume: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'numeric',
        allowNull: true,
        isArray: false,
      },
      color: {
        coercedType: {} as BalloonColorsEnum | null,
        enumType: {} as BalloonColorsEnum,
        enumValues: BalloonColorsEnumValues,
        dbType: 'balloon_colors_enum',
        allowNull: true,
        isArray: false,
      },
      positionAlpha: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      positionBeta: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      multicolor: {
        coercedType: {} as BalloonColorsEnum[] | null,
        enumType: {} as BalloonColorsEnum,
        enumValues: BalloonColorsEnumValues,
        dbType: 'balloon_colors_enum[]',
        allowNull: true,
        isArray: true,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: true,
      },
      balloonLine: {
        type: 'HasOne',
        foreignKey: 'balloonId',
        tables: ['balloon_lines'],
        optional: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'extraRateableId',
        tables: ['extra_ratings'],
        optional: null,
      },
      sandbags: {
        type: 'HasMany',
        foreignKey: 'balloonId',
        tables: ['sandbags'],
        optional: null,
      },
    },
  },
  collars: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      petId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      balloonId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      lost: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      hidden: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      tagName: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      position: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      pet: {
        type: 'BelongsTo',
        foreignKey: 'petId',
        tables: ['pets'],
        optional: false,
      },
      balloon: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: true,
      },
    },
  },
  composition_asset_audits: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      compositionAssetId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      notes: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      approval: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      compositionAsset: {
        type: 'BelongsTo',
        foreignKey: 'compositionAssetId',
        tables: ['composition_assets'],
        optional: false,
      },
      composition: {
        type: 'HasOne',
        foreignKey: 'compositionAssetAuditId',
        tables: ['compositions'],
        optional: null,
      },
      user: {
        type: 'HasOne',
        foreignKey: 'compositionAssetAuditId',
        tables: ['users'],
        optional: null,
      },
    },
  },
  composition_assets: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      compositionId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      src: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      primary: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      score: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      composition: {
        type: 'BelongsTo',
        foreignKey: 'compositionId',
        tables: ['compositions'],
        optional: false,
      },
      user: {
        type: 'HasOne',
        foreignKey: 'compositionAssetId',
        tables: ['users'],
        optional: null,
      },
      currentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
      },
      compositionAssetAudits: {
        type: 'HasMany',
        foreignKey: 'compositionAssetId',
        tables: ['composition_asset_audits'],
        optional: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
      },
    },
  },
  compositions: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      content: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      metadata: {
        coercedType: {} as Json,
        enumType: null,
        enumValues: null,
        dbType: 'jsonb',
        allowNull: false,
        isArray: false,
      },
      metadata2: {
        coercedType: {} as Json | null,
        enumType: null,
        enumValues: null,
        dbType: 'jsonb',
        allowNull: true,
        isArray: false,
      },
      metadata3: {
        coercedType: {} as Json | null,
        enumType: null,
        enumValues: null,
        dbType: 'json',
        allowNull: true,
        isArray: false,
      },
      primary: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
      },
      mainCompositionAsset: {
        type: 'HasOne',
        foreignKey: 'compositionId',
        tables: ['composition_assets'],
        optional: null,
      },
      currentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
      },
      compositionAssets: {
        type: 'HasMany',
        foreignKey: 'compositionId',
        tables: ['composition_assets'],
        optional: null,
      },
      compositionAssetAudits: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_asset_audits'],
        optional: null,
      },
      mainCompositionAssetAudits: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_asset_audits'],
        optional: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'extraRateableId',
        tables: ['extra_ratings'],
        optional: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
      },
    },
  },
  edge_case_attributes: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      kPop: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      popK: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      popKPop: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  extra_ratings: {
    columns: {
      type: {
        coercedType: {} as ExtraRatingTypesEnum,
        enumType: {} as ExtraRatingTypesEnum,
        enumValues: ExtraRatingTypesEnumValues,
        dbType: 'extra_rating_types_enum',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      extraRateableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      extraRateableType: {
        coercedType: {} as ExtraRateableTypesEnum,
        enumType: {} as ExtraRateableTypesEnum,
        enumValues: ExtraRateableTypesEnumValues,
        dbType: 'extra_rateable_types_enum',
        allowNull: false,
        isArray: false,
      },
      rating: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
      },
      extraRateable: {
        type: 'BelongsTo',
        foreignKey: 'extraRateableId',
        tables: ['compositions', 'posts', 'beautiful_balloons'],
        optional: false,
      },
    },
  },
  graph_edge_nodes: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      edgeId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      nodeId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      multiScopedPosition: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      edge: {
        type: 'BelongsTo',
        foreignKey: 'edgeId',
        tables: ['graph_edges'],
        optional: false,
      },
      node: {
        type: 'BelongsTo',
        foreignKey: 'nodeId',
        tables: ['graph_nodes'],
        optional: false,
      },
      justThisSibling: {
        type: 'HasOne',
        foreignKey: 'graphEdgeNodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      headSibling: {
        type: 'HasOne',
        foreignKey: 'graphEdgeNodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      siblingsIncludingMe: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      siblings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      orderedSiblings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      orderedSiblingsWithOrderOnSource: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      tailSiblings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edge_nodes'],
        optional: null,
      },
    },
  },
  graph_edges: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      weight: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'numeric',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      edgeNodes: {
        type: 'HasMany',
        foreignKey: 'edgeId',
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      nodes: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_nodes'],
        optional: null,
      },
    },
  },
  graph_nodes: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      omittedEdgePosition: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      edgeNodes: {
        type: 'HasMany',
        foreignKey: 'nodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      orderedEdgeNodes: {
        type: 'HasMany',
        foreignKey: 'nodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      edges: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
      },
      edgesOrderedByName: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
      },
      edgesOrderedByPosition: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
      },
      nonOmittedPositionEdgeNodes: {
        type: 'HasMany',
        foreignKey: 'nodeId',
        tables: ['graph_edge_nodes'],
        optional: null,
      },
      nonOmittedPositionEdges: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
      },
      nonNodeNameEdgesOnThroughAssociation: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['graph_edges'],
        optional: null,
      },
    },
  },
  incompatible_foreign_key_type_examples: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
      },
    },
  },
  localized_texts: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      localizableType: {
        coercedType: {} as LocalizableTypesEnum,
        enumType: {} as LocalizableTypesEnum,
        enumValues: LocalizableTypesEnumValues,
        dbType: 'localizable_types_enum',
        allowNull: false,
        isArray: false,
      },
      localizableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      locale: {
        coercedType: {} as LocalesEnum,
        enumType: {} as LocalesEnum,
        enumValues: LocalesEnumValues,
        dbType: 'locales_enum',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      title: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      localizable: {
        type: 'BelongsTo',
        foreignKey: 'localizableId',
        tables: ['compositions', 'composition_assets'],
        optional: false,
      },
    },
  },
  model_without_updated_at: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      cantUpdateThis: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      
    },
  },
  pet_understudy_join_models: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      petId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      understudyId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      pet: {
        type: 'BelongsTo',
        foreignKey: 'petId',
        tables: ['pets'],
        optional: false,
      },
      understudy: {
        type: 'BelongsTo',
        foreignKey: 'understudyId',
        tables: ['pets'],
        optional: false,
      },
    },
  },
  pets: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      userUuid: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'uuid',
        allowNull: true,
        isArray: false,
      },
      favoriteTreats: {
        coercedType: {} as CatTreats[] | null,
        enumType: {} as CatTreats,
        enumValues: CatTreatsValues,
        dbType: 'cat_treats[]',
        allowNull: true,
        isArray: true,
      },
      favoriteDaysOfWeek: {
        coercedType: {} as number[] | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer[]',
        allowNull: true,
        isArray: true,
      },
      species: {
        coercedType: {} as Species | null,
        enumType: {} as Species,
        enumValues: SpeciesValues,
        dbType: 'species',
        allowNull: true,
        isArray: false,
      },
      positionWithinSpecies: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      nickname: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      userThroughUuid: {
        type: 'BelongsTo',
        foreignKey: 'userUuid',
        tables: ['users'],
        optional: true,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: true,
      },
      featuredPost: {
        type: 'HasOne',
        foreignKey: 'petId',
        tables: ['posts'],
        optional: null,
      },
      currentCollar: {
        type: 'HasOne',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
      },
      notLostCollar: {
        type: 'HasOne',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
      },
      ratings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
      },
      featuredRatings: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['ratings'],
        optional: null,
      },
      collars: {
        type: 'HasMany',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
      },
      uniqueCollars: {
        type: 'HasMany',
        foreignKey: 'petId',
        tables: ['collars'],
        optional: null,
      },
      uniqueBalloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
      },
      distinctBalloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
      },
      redBalloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
      },
      notRedBalloons: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['beautiful_balloons'],
        optional: null,
      },
      petUnderstudies: {
        type: 'HasMany',
        foreignKey: 'petId',
        tables: ['pet_understudy_join_models'],
        optional: null,
      },
      understudies: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['pets'],
        optional: null,
      },
    },
  },
  post_visibilities: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      visibility: {
        coercedType: {} as boolean | null,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: true,
        isArray: false,
      },
      notes: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      post: {
        type: 'HasOne',
        foreignKey: 'postVisibilityId',
        tables: ['posts'],
        optional: null,
      },
    },
  },
  posts: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      postVisibilityId: {
        coercedType: {} as IdType | null,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: true,
        isArray: false,
      },
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      position: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
      },
      postVisibility: {
        type: 'BelongsTo',
        foreignKey: 'postVisibilityId',
        tables: ['post_visibilities'],
        optional: true,
      },
      ratings: {
        type: 'HasMany',
        foreignKey: 'rateableId',
        tables: ['ratings'],
        optional: null,
      },
      heartRatings: {
        type: 'HasMany',
        foreignKey: 'extraRateableId',
        tables: ['extra_ratings'],
        optional: null,
      },
    },
  },
  ratings: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      rateableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      rateableType: {
        coercedType: {} as string,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      rating: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      body: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
      },
      rateable: {
        type: 'BelongsTo',
        foreignKey: 'rateableId',
        tables: ['compositions', 'posts'],
        optional: false,
      },
    },
  },
  sandbags: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      balloonId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      weight: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      weightKgs: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      weightTons: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      mylar: {
        type: 'BelongsTo',
        foreignKey: 'balloonId',
        tables: ['beautiful_balloons'],
        optional: false,
      },
    },
  },
  user_settings: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      likesChalupas: {
        coercedType: {} as boolean,
        enumType: null,
        enumValues: null,
        dbType: 'boolean',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
      },
    },
  },
  users: {
    columns: {
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      uuid: {
        coercedType: {} as string,
        enumType: null,
        enumValues: null,
        dbType: 'uuid',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      email: {
        coercedType: {} as string,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      socialSecurityNumber: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      birthdate: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'date',
        allowNull: true,
        isArray: false,
      },
      favoriteWord: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: true,
        isArray: false,
      },
      featuredPostPosition: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      targetRating: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      favoriteNumbers: {
        coercedType: {} as number[] | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer[]',
        allowNull: true,
        isArray: true,
      },
      favoriteDates: {
        coercedType: {} as Timestamp[] | null,
        enumType: null,
        enumValues: null,
        dbType: 'date[]',
        allowNull: true,
        isArray: true,
      },
      favoriteDatetimes: {
        coercedType: {} as Timestamp[] | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone[]',
        allowNull: true,
        isArray: true,
      },
      passwordDigest: {
        coercedType: {} as string,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: false,
        isArray: false,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
    },
    virtualColumns: ['password'],
    associations: {
      userSettings: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['user_settings'],
        optional: null,
      },
      featuredPost: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['posts'],
        optional: null,
      },
      mainComposition: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      mainCompositionAsset: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['composition_assets'],
        optional: null,
      },
      firstComposition: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      firstComposition2: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      lastComposition: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      firstPet: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['pets'],
        optional: null,
      },
      firstPetFromUuid: {
        type: 'HasOne',
        foreignKey: 'userUuid',
        tables: ['pets'],
        optional: null,
      },
      firstCollarFromUuid: {
        type: 'HasOne',
        foreignKey: 'userId',
        tables: ['collars'],
        optional: null,
      },
      posts: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['posts'],
        optional: null,
      },
      ratings: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['ratings'],
        optional: null,
      },
      featuredRatings: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['ratings'],
        optional: null,
      },
      ratingsThroughPostsThatMatchUserTargetRating: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['ratings'],
        optional: null,
      },
      compositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      incompatibleForeignKeyTypeExamples: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['incompatible_foreign_key_type_examples'],
        optional: null,
      },
      compositionAssets: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
      },
      sortedCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      sortedCompositions2: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      compositionAssetAudits: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_asset_audits'],
        optional: null,
      },
      recentCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      notRecentCompositions: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['compositions'],
        optional: null,
      },
      recentCompositionAssets: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
      },
      recentMainCompositionAssets: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
      },
      nonExtantCompositionAssets1: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
      },
      nonExtantCompositionAssets2: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['composition_assets'],
        optional: null,
      },
      balloons: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['beautiful_balloons'],
        optional: null,
      },
      balloonLines: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['balloon_lines'],
        optional: null,
      },
      pets: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['pets'],
        optional: null,
      },
      petsFromUuid: {
        type: 'HasMany',
        foreignKey: 'userUuid',
        tables: ['pets'],
        optional: null,
      },
      collarsFromUuid: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['collars'],
        optional: null,
      },
      balloonsFromUuid: {
        type: 'HasMany',
        foreignKey: 'userId',
        tables: ['beautiful_balloons'],
        optional: null,
      },
    },
  },
} as const
